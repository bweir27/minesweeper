# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
    # Triggers the workflow on push or pull request events but only for the main branch
    push:
        branches: [ main, CI/CD ]
    pull_request:
        branches: [ main, CI/CD ]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

#set environment variables
env:
    HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
    APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
    HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

#defaults:
#    run:
#        working-directory: ./node_modules


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    cache:
        runs-on: ubuntu-latest
        steps:
            - name: Cache node modules
              uses: actions/cache@v2
              with:
                  path: ~/.npm
                  key: v1-npm-deps-${ hashFiles('**/yarn.lock') }}
                  restore-keys: v1-npm-deps-

    # This workflow contains a single job called "build"
    test:
        container: node:14-stretch
        # The type of runner that the job will run on
        runs-on: ubuntu-latest
        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - uses: actions/checkout@v2
            # Runs a single command using the runners shell
            - name: Yarn Install
              run: yarn install

    build:
        container: node:14-stretch
        needs: test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - run: npm install -g gulp
            - run: yarn install
            - run: gulp build
            - name: Upload Artifact
              uses: actions/upload-artifact@v2
              with:
                name: my-artifact
                path: dist/
                retention-days: 5


    deploy:
        runs-on: ubuntu-latest
        needs: [test, build]
        container: ruby:2
        steps:
            - name: Download artifact
              uses: actions/download-artifact@v2
              with:
                  name: my-artifact
#            - name: working dir
#              run: pwd
#            - name: test ls
#              run: ls
#            - name: Install Heroku Cli
#              run: curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
#            - name: Login to Heroku Container registry
#              env:
#                HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
#              run: heroku container:login
            - run: git init
#            - run: git config user.name "GitHub CI/CD"
#            - run: git config user.email "${{ secrets.HEROKU_EMAIL}}"
#            - run: git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/${{ secrets.HEROKU_APP_NAME }}-devel.git
#            - run: git add .
#            - run: git reset -- client/stats.json
#            - run: git commit -m "GitHub CI Build"
            - name: Install Heroku Cli
              run: curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
#            - run: git push -f heroku master
            - name: "Deploy the web dyno"
              uses: "akhileshns/heroku-deploy@v3.12.12"
              with:
                docker_heroku_process_type: web
                heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
                heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
                heroku_email: ${{ secrets.HEROKU_EMAIL }}
                justlogin: true
            -   name: "Login to heroku registry"
                run: heroku container:login

            -   name: "Build and push to heroku registry"
                run: heroku container:push web --app ${{ secrets.HEROKU_APP_NAME }}

            -   name: "Releases the container"
                run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}


#            -   name: push to heroku
#                env:
#                    HEROKU_REGISTRY_URL: registry.heroku.com
#                    HEROKU_TOKEN: ${{ secrets.HEROKU_TOKEN }}
#                run: |
#                    docker login --username=_ --password $HEROKU_TOKEN $HEROKU_REGISTRY_URL
#                    export HEROKU_API_KEY=$HEROKU_TOKEN
#                    heroku container:login
#                    heroku container:push web --app ${{secrets.HEROKU_APP_NAME}}
#                    heroku container:release web --app ${{secrets.HEROKU_APP_NAME}}
#                    heroku ps:scale web=1 --app ${{secrets.HEROKU_APP_NAME}}
#            - run: heroku container:login
#            - run: git push heroku main

